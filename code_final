import numpy as np
import pandas as pd
#import math
from sklearn.feature_selection import RFE,RFECV
from sklearn.linear_model import LinearRegression,Ridge,Lasso,ElasticNet
from scipy.stats import pearsonr
from sklearn.model_selection import KFold,StratifiedKFold,GridSearchCV,RandomizedSearchCV
from scipy.stats import uniform
from matplotlib import cm,pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

'''数据读取、数据清洗'''  
data = pd.read_csv('data.csv', header=0) 
#处理特殊字符
data_new = data.replace('-',np.nan)
data_new = data_new.replace('N',np.nan)
data_new = data_new.replace('3,500+','3500')
data_new = data_new.replace('250,000+','250000')
#删除缺失值多的行和列
data_new = data_new.dropna(thresh=285)
data_new = data_new.dropna(axis=1,thresh=1200)
data_new2 = pd.DataFrame(data_new,dtype='float')
#填充缺失值
#print(data_new2.isnull())
for column in data_new2.columns:
    data_new2[column].fillna(data_new2[column].mean(),inplace=True) 
#print(data_new2.isnull())
#data_new2 = data_new2.applymap(lambda x: math.log(x))
#设置变量集
label = np.array(data_new2)[:, -1]
feature = np.array(data_new2)[:, :-1]

'''特征值提取'''
#设定回归和REF
rfr = Ridge(alpha=10000, fit_intercept=True, normalize=True,
                  copy_X=True, max_iter=1000, tol=0.0001, solver='auto')
rfecv = RFECV(estimator=rfr,step=1,min_features_to_select=1, 
              cv=KFold(n_splits=3, random_state=1), scoring='r2')
rfecv.fit(feature, label)
#查看特征选择结果
print('特征数量：%.3f' %rfecv.n_features_)
#print(rfecv.ranking_)
#print(rfecv.support_)
print('R2 scores:',rfecv.grid_scores_) 
#print('回归器：%s' %rfecv.estimator_ )
#绘制特征选择过程R2变化图
plt.xlabel("Number of features selected")
plt.ylabel("R2 score")
plt.plot(range(1, len(rfecv.grid_scores_) + 1), rfecv.grid_scores_)
plt.show()

'''调参'''
#基于选择特征重新定义变量集
data_new3 =data_new2.iloc[:,rfecv.support_]
data_new3['Label'] = label
#print(data_new3)
label_new = np.array(data_new3)[:, -1]
feature_new = np.array(data_new3)[:, :-1]

#设定回归函数和调参器     
rfr2 =Ridge(fit_intercept=True, normalize=True,
                  copy_X=True,  tol=1e-4, solver='auto')
alpht_list = list(range(1,30000,1000))
max_iter_list = list(range(1,3000,100))
param_grid = {'alpha':alpht_list,'max_iter':max_iter_list}
#param_grid = {'alpha':uniform(),'max_iter':uniform()}
grid = GridSearchCV(estimator=rfr2,param_grid=param_grid,scoring='r2',
                    cv=KFold(n_splits=3, random_state=1))
#grid = RandomizedSearchCV(estimator=rfe,param_distributions=param_grid,
#                          n_iter=100,scoring='r2',random_state=7)
grid.fit(feature_new, label_new)
#查看调参结果
print('最高得分：%.3f' %grid.best_score_)
print('最优参数：%s' %grid.best_estimator_.alpha)
print('最优参数：%s' %grid.best_estimator_.max_iter)
#print('回归器：%s' %grid.estimator)
#print(grid.cv_results_['mean_test_score'])
#绘制调参过程R2变化图
x = np.array(alpht_list)
y = np.array(max_iter_list)
z = grid.cv_results_['mean_test_score'].reshape(len(max_iter_list),len(alpht_list))
X, Y = np.meshgrid(x,y)
ax = plt.figure().gca(projection='3d')
ax.set_xlabel('alpha')
ax.set_ylabel('max_iter')
ax.set_zlabel('R2 score')
#fig_3d = ax.plot_wireframe(X, Y, z,rstride=10, cstride=10)
surf = ax.plot_surface(X, Y, z, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)
plt.show()




